#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int, int> pi;

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    ll t, n, k;
    cin >> t;
    while (t--)
    {
        cin >> n >> k;
        --k;
        if (n % 2 == 0)
        {
            cout << 1 + k % n << '\n';
        }
        else
        {
            ll intersection = k / ((n - 1) / 2);
            cout << 1 + (k + intersection) % n << "\n";
        }
    }

    return 0;
}

// 1487B - Круговорот котов в квартире
// Если n
//  — четное, то в каждый час A и B будут находиться в местах с разной четностью, а потому никогда не встретятся. В противном случае рассмотрим ситуацию поближе.
// В самом начале, A в n
// и B в 1. Однако, так как мы можем представить все места как цикл, то n и 1, на самом деле, соседние позиции. После этого, A и B (стартуя с соседних позиций) просто движутся в разные стороны и встретятся в противоположной точке ровно через ⌊n2⌋
// часов.
// После встречи B как будто «перепрыгивает» через A, делая 1
// дополнительный шаг, и ситуация фактически становится как первоначальная: A и B — соседи и двигаются в разные стороны.
// Другими словами, каждые f=⌊n2⌋
// шагов B делает один дополнительный шаг, а поэтому ответ (если и k и места 0-индексированы) равен
// (k+(nmod2)⋅⌊kf⌋)modn