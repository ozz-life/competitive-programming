/*
            ▒█████  ▒███████▒▒███████▒      ██▓     ██▓  █████▒▓█████
           ▒██▒  ██▒▒ ▒ ▒ ▄▀░▒ ▒ ▒ ▄▀░     ▓██▒    ▓██▒▓██   ▒ ▓█   ▀
           ▒██░  ██▒░ ▒ ▄▀▒░ ░ ▒ ▄▀▒░      ▒██░    ▒██▒▒████ ░ ▒███
           ▒██   ██░  ▄▀▒   ░  ▄▀▒   ░     ▒██░    ░██░░▓█▒  ░ ▒▓█  ▄
           ░ ████▓▒░▒███████▒▒███████▒ ██▓ ░██████▒░██░░▒█░    ░▒████▒
           ░ ▒░▒░▒░ ░▒▒ ▓░▒░▒░▒▒ ▓░▒░▒ ▒▓▒ ░ ▒░▓  ░░▓   ▒ ░    ░░ ▒░ ░
             ░ ▒ ▒░ ░░▒ ▒ ░ ▒░░▒ ▒ ░ ▒ ░▒  ░ ░ ▒  ░ ▒ ░ ░       ░ ░  ░
           ░ ░ ░ ▒  ░ ░ ░ ░ ░░ ░ ░ ░ ░ ░     ░ ░    ▒ ░ ░ ░       ░
               ░ ░    ░ ░      ░ ░      ░      ░  ░ ░             ░  ░
                    ░        ░          ░
          Author: Stanislav "ozz" Ozeransky | Site: https:://ozz.life/

We are what we think.
All that we are arises with our thoughts.
With our thoughts we make the world.
Speak or act with a pure mind
And happiness will follow you
As your shadow, unshakable. ― Gautama Buddha

*/

package main

import (
	"bufio"
	"fmt"
	"os"
)

/*
 * Math
 ******************************************************************************/

func gcd(a, b int) int {
	for a != 0 {
		a, b = b%a, a
	}
	return b
}
func abs(x int) int {
	if x < 0 {
		return -x
	}
	return x
}
func min(a, b int) int {
	if b < a {
		return b
	}
	return a
}
func max(a, b int) int {
	if b > a {
		return b
	}
	return a
}

/*
 * Solve
 ******************************************************************************/

//  Смотри, как оказалось там все достаточно просто. Тебе нужно найти всего две ягоды, с максимальным ростом среди положительных и с максимальным ростом среди отрицательных.
//  Потом считаешь на какую высоту заберется улитка на всех позитивных ягодах кроме найденной. Ну и возможно два случая:
//  1. максимальная высота достигается как раз после лучшей положительной ягоды
//  2. макс высота после всех положительной и лучшей отрицательной.
//  В каком порядке расставлены все остальные ягоды значения не имеет
// Лучшая та, на которой улитка за день ползет выше всех И среди отрицательных также

// пройдись по всем, которые в сумме дают положительное число, получи сумму, потом пройдись вообще по всем, считая, что это последнее число, прибавляй к сумме либо то, на сколько улитка поднималась, либо то, насколько она опускалась, найди максимум

// Друзья, не усложняете улитку... Там нужно просто рассортировать ягоды на отрицательный итог и все прочие. В обеих кучах найти волшебные ягодки, которые нужно дать в конце кучки, или в её начале

// Идея в том что взяв все положительные ягоды в ЛЮБОМ порядке ты окажешься на определенной выстое H.
// Нужно понять благодаря какой ягоде в последний день улитка окажется выше всего.
// Так как каждую ночь улитка спускается на определенную высоту h, нужно найти такое h, чтобы H + h было максимальным.

// В улитке ключевыми являются две ягоды. Задача сводится к тому, что бы правильно расположить их и остальные вокруг них. При чем понять какие именно ягоды ключевые очень просто.)

// Я правильно понимаю, что стратегия в улитке такая, что сначала надо скормить ей все ягоды, которые её не спускают ниже за ночь, а потом дать одну с самым большим приростом за день? Это похоже на правду?


func solution(a [][]int) (int, []int) {
	var maxJump, lastJumpIndex, maxProfit int
	maxA := a[0][0]

	// Первый проход по ягодам для определения максимального прыжка, его индекса и максимальной прибыли
	for i, ab := range a {
		a, b := ab[0], ab[1]

		if a > maxA {
			maxA = a
		}

		diff := a - b

		if diff > 0 {
			profit := max(diff, a) - min(diff, a)
			if profit > maxProfit {
				maxProfit = profit
				maxJump = a
				lastJumpIndex = i
			}
		} else {
			if maxProfit < a {
				maxProfit = a
				maxJump = a
				lastJumpIndex = i
			}
		}
	}

	var jumps []int
	var endJumps []int
	var height int

	// Второй проход по ягодам для вычисления общей высоты
	for i, ab := range a {
		a, b := ab[0], ab[1]
		diff := a - b

		// Если текущая ягода - последний прыжок улитки, обновляем высоту и переходим к следующей ягоде
		if i == lastJumpIndex {
			height += maxJump
			continue
		}

		// Если прибыль отрицательная, добавляем индекс ягоды в конец списка ягод, после которых улитка опускается
		if diff <= 0 {
			endJumps = append(endJumps, i+1)
		} else {
			// Если прибыль положительная, добавляем индекс ягоды в список прыжков улитки и обновляем высоту
			jumps = append(jumps, i+1)
			height += diff
		}
	}

	jumps = append(jumps, lastJumpIndex+1)
	jumps = append(jumps, endJumps...)

	return height, jumps
}

func solve(in *bufio.Reader, out *bufio.Writer) {
	var n int
	fmt.Fscan(in, &n)
	berries := make([][]int, n)
	for i := 0; i < n; i++ {
		var a, b int
		fmt.Fscan(in, &a, &b)
		berries[i] = []int{a, b}
	}

	h, plan := solution(berries)
	fmt.Println(h)
	for _, v := range plan {
		fmt.Printf("%d ", v)
	}
}

/*
 * Main
 ******************************************************************************/

func main() {
	in := bufio.NewReader(os.Stdin)
	out := bufio.NewWriter(os.Stdout)
	defer out.Flush()

	// var count_test int
	// fmt.Fscan(in, &count_test)

	var count_test int = 1
	for i := 0; i < count_test; i++ {
		solve(in, out)
	}
}
