#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int, int> pi;

int main()
{
    ll n;
    cin >> n;

    ll result = 0;
    ll step = 1;
    while (n >= step) {
        n -= step;
        step += 1;
        result += 1;
    }

    cout << result << endl;
    return 0;
}
////////////////////////////////////////////////////////////////////////////////
// Или

// int main() {
//     long long n;
//     cin >> n;
//     // Формула квадратного уравнения x^2 + x - 2n = 0
//     // Находим корень из дискриминанта
//     double discriminant = sqrt(1 + 8 * n);
//     // Находим решение уравнения
//     long long steps = (-1 + discriminant) / 2;
//     cout << steps << endl;
//     return 0;
// }
// Идея решения заключается в том, что для построения лесенки из n блоков с максимальным количеством ступенек необходимо распределить блоки между ступеньками равномерно, при этом каждая i-ая ступенька должна состоять ровно из i блоков. То есть, первая ступенька будет состоять из одного блока, вторая - из двух блоков и т.д. Таким образом, для построения максимальной лесенки нужно найти наибольшее количество ступенек, для которых будет достаточно блоков.
// Решая квадратное уравнение x^2 + x - 2n = 0, мы найдем решение для количества ступенек x. Для этого используется формула дискриминанта, где D = b^2 - 4ac, a = 1, b = 1, c = -2n. Корень из дискриминанта позволяет нам найти два решения уравнения, но нас интересует только положительное, поэтому берется только одно решение.